import { useContext, useEffect } from 'react'
import Head from 'next/head'
import { gql, GraphQLClient } from 'graphql-request'
import { PageContext } from '../components/context/pageContext'
import { HomeWrapper } from '../styles/basic.styles'
import { HeroSection } from '../components/hero'
import { MovieSection } from '../components/moviesSection'
import { FooterSection } from '../components/footer'
import { ToSlug } from '../components/animations/toSlug'
import { FadeTransition } from '../components/animations/fadeTransition'
import { TopMenu } from '../components/menu/topbar'

const Home = ({ videos, account }) => {
  const { isOpen, setIsOpen } = useContext(PageContext)

  useEffect(() => {
    setIsOpen(false)
  }, [setIsOpen])

  const handleSlugTransition = (isOpen) => {
    if (isOpen == true) {
      return (
        <ToSlug />
      )
    }
  }

  return (
    <>

      {handleSlugTransition(isOpen)}

      <Head>
        <title>acme movies</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <FadeTransition>
        <TopMenu account={account} />
        <HomeWrapper >
          <HeroSection videos={videos} />
          <MovieSection videos={videos} />
          <FooterSection />
        </HomeWrapper>
      </FadeTransition>
    </>
  )
}

/** GET DATA **/
export const getStaticProps = async () => {
  const url = process.env.ENDPOINT
  const graphQLClient = new GraphQLClient(url, {
    headers: {
      "Authorization": process.env.GRAPH_CMS_TOKEN
    }
  })

  const videosQuery = gql`
    query {
      videos{
        createdAt,
        id,
        title,
        tag,
        description,
        seen,
        slug,
        displayTag,
        thumbnail{
          url
        },
        bigThumbnail{
          url
        }
        mp4{
          url
        }
      }
    }`

  const accountQuery = gql`
      query {
        account(where: {id:"cl266w77718si0cuq8nnqz05d"}){
          username
          avatar {
            url
          }
        }
      }`

  const data = await graphQLClient.request(videosQuery)
  const videos = data.videos
  const accountData = await graphQLClient.request(accountQuery)
  const account = accountData.account

  return {
    props: {
      videos,
      account
    }
  }
}

export default Home;